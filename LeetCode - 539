// problem :  https://leetcode.com/problems/minimum-time-difference/

// solution :

class Solution {
public:
    int findMinDifference(vector<string>& timePoints) {

        vector<int>minutes;
        int ans = INT_MAX;

        for(int i = 0; i < timePoints.size(); i++){
            string time = timePoints[i];
            int h = stoi(time.substr(0, 2));
            int m = stoi(time.substr(3));
            int totalMinutes = h * 60 + m;
            minutes.push_back(totalMinutes);
        }

        sort(begin(minutes), end(minutes));

        for(int i = 0; i < minutes.size() - 1; i++){
            int diff = minutes[i + 1] - minutes[i];
            ans = min(ans, diff);
        }

        int roundClockMinuteDiff = (24 * 60 - minutes[minutes.size() - 1]) + minutes[0];
        return min(ans, roundClockMinuteDiff);
    }
};
