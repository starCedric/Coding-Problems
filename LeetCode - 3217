// problem : https://leetcode.com/problems/delete-nodes-from-linked-list-present-in-array/description


// --------------------------------- solution 1 : --------------------------

class Solution {
public:

    bool checkInArray(int &n, vector<int> &nums){

        for(int it : nums){
            if(it == n)
                return true;
        }
        return false;
    }

    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        
        ListNode* temp = head;
        ListNode* prev = nullptr;
        ListNode* newHead = nullptr;

        if(head == nullptr || head -> next == nullptr){
            return head;
        }

        int count = 0;

        while(temp != nullptr){

            if(checkInArray(temp -> val, nums)){

                ListNode* del = temp;
                temp = temp -> next;

                if(prev != nullptr){
                    prev -> next = temp;
                }else{
                    newHead = temp;
                }

                delete del;
            }

            else{

                if(count == 0){
                    newHead = temp;
                    count++;
                }

                prev = temp;
                temp = temp -> next;
                
            }
        }
        return newHead;
    }
};


// ----------------------------- solution 2 : (optimised) -------------------------------

class Solution {
public:
    ListNode* modifiedList(vector<int>& nums, ListNode* head) {
        
        unordered_set<int> st(nums.begin(), nums.end());

        while(head != nullptr && st.find(head -> val) != st.end()){
            ListNode* temp = head;
            head = head -> next;
            delete temp;
        }

        ListNode* curr = head;

        while(curr != nullptr && curr -> next != nullptr){
            if(st.find(curr -> next -> val) != st.end()){
                ListNode* temp = curr -> next;
                curr -> next = curr -> next -> next;
                delete temp;
            }
            else{
                curr = curr -> next;
            }
        }

        return head;
    }
};
