// Solution 1 :
// Simple simulation. TC -> O(m * n), SC -> O(1)

class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {

        if(m * n != original.size()) return {};
        vector<vector<int>> res(m, vector<int>(n));
        int idx = 0;

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                res[i][j] = original[idx];
                idx++;
            }
        }

        return res;
    }
};

// Solution 2 : 
// Using maths. TC -> O(m * n), SC -> O(1)

class Solution {
public:
    vector<vector<int>> construct2DArray(vector<int>& original, int m, int n) {
        
        if((m * n) != original.size()) return {};
        vector<vector<int>> res(m, vector<int>(n));

        for(int i = 0; i < (m * n); i++){
            res[i / n][i % n] = original[i];
        }

        return res;
    }
};
